program marsagliatest;
{$mode objfpc}
{ This is a test main program. It should compile and print 9 TRUE's. 
  That means it renders the same values as Marsaglia intended, given the
  seeds provided. It is basically Marsaglia's C test program in Pascal }
uses 
  uMarsaglia;
var
  i:integer;
  k:dword;
begin 
  // Set the table to known values, so we can verify the results.
  // The one million iterations per prng are  not a mistake.
  // The whole program will finish in less than .5 seconds even on a Raspberry pi.
  // note the extreme lag for the FPC random.... 
  // order is important: some seeds are taken from other prng's
  Prng.settable(12345,65435,34221,12345,9983651,95746118);
  for i:=1 to 1000000 do k:=Prng.LFIB4;writeln('LFIB4 ','Pass: ',k-1064612766=0);
  for i:=1 to 1000000 do k:=Prng.SWB;  writeln('SWB   ','Pass: ',k- 627749721=0);
  for i:=1 to 1000000 do k:=Prng.KISS; writeln('KISS  ','Pass: ',k-1372460312=0);
  for i:=1 to 1000000 do k:=Prng.CONG; writeln('CONG  ','Pass: ',k-1529210297=0);
  for i:=1 to 1000000 do k:=Prng.SHR3; writeln('SHR3  ','Pass: ',k-2642725982=0);
  for i:=1 to 1000000 do k:=Prng.MWC;  writeln('MWC   ','Pass: ',k- 904977562=0);
  for i:=1 to 1000000 do k:=Prng.FIB;  writeln('FIB   ','Pass: ',k-3519793928=0);   
  for i:=1 to 1000000 do k:=Prng.XOS;  writeln('XOS   ','Pass: ',k-1110212780=0);
  for i:=1 to 1000000 do k:=Random(high(Dword));writeln('FPC   ','Pass: ',k-1314949284=0);
  // Scale to float demo 
  for i := 0 to 9 do writeln(ScaleToFloat(Prng.SHR3):2:10);
  writeln('..........................');
  for i := 0 to 9 do writeln(ScaleToFloat(Prng.SHR3, false):2:10);
end.